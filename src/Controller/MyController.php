<?php

namespace Drupal\axelerant_test\Controller;

use Drupal\node\Entity\Node;
use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * Controller routines for fetching node values and return as a json response.
 *
 * The response of Drupal's HTTP Kernel system's request is generated by
 * a piece of code called the controller.
 *
 * In Drupal 8, we use a controller class
 * for placing those piece of codes in methods which responds to a route.
 *
 * This file will be placed at {module_name}/src/Controller directory. Route
 * entries uses a key '_controller' to define the method called from controller
 * class.
 *
 */
class MyController extends ControllerBase {

	/**
   	 * returns the node details in json format of a 'page' content type.
     *
     * @param string $api_key
     *   First argument of URL.
     * @param string $nid
     *   Second argument of URL.
     *
     * @return array
     *   Controller Json response.
     *
     */
    public function getNodeAsJson($api_key, $nid) {

    	// Fetching the stored api key to match with the api key coming in URL
    	$siteapikey = \Drupal::config('system.siteapikey')->get('key');

    	// Checked if the node id coming in URL is of 'page' content type
    	$query = \Drupal::entityQuery('node');
		$query->condition('type', 'page');
		$query->condition('nid', $nid);
		$page_nids = $query->execute();

		// Making response as 'access denied' by default
        $response['response'] = 'access denied';

        // Checking if the api_key provided is same as the api key stored as a
        // system variable & node id is of page content type. 
        if ($api_key == $siteapikey && !empty($page_nids)) {

        	// Loading the node
            $node = Node::load($nid);
            // Get the node values and stored as a response
            $response['response'] = $node->toArray();
        }
      
      	// Returning the json response
        return new JsonResponse($response);
    }
}